from fastapi import FastAPI, Request, Depends
from fastapi.responses import RedirectResponse, JSONResponse
from jose import jwt
import time, uuid

app = FastAPI()

# 临时存储 code -> user
authorization_codes = {}
access_tokens = {}

# 假用户数据库
users = {"alice": {"sub": "1", "name": "Alice", "email": "alice@example.com"}}

CLIENT_ID = "my-client-id"
CLIENT_SECRET = "my-client-secret"
REDIRECT_URI = "http://localhost:8000/callback"
JWT_SECRET = "super-secret-key"

# 1. Authorization Endpoint
@app.get("/authorize")
def authorize(response_type: str, client_id: str, redirect_uri: str, scope: str, state: str):
    if client_id != CLIENT_ID:
        return JSONResponse({"error": "invalid_client"}, status_code=400)

    # 假设用户已经登录
    user = users["alice"]

    code = str(uuid.uuid4())
    authorization_codes[code] = user

    return RedirectResponse(f"{redirect_uri}?code={code}&state={state}")


# 2. Token Endpoint
@app.post("/token")
def token(grant_type: str, code: str, client_id: str, client_secret: str, redirect_uri: str):
    if client_id != CLIENT_ID or client_secret != CLIENT_SECRET:
        return JSONResponse({"error": "invalid_client"}, status_code=400)

    if code not in authorization_codes:
        return JSONResponse({"error": "invalid_code"}, status_code=400)

    user = authorization_codes.pop(code)

    access_token = str(uuid.uuid4())
    id_token = jwt.encode(
        {"sub": user["sub"], "name": user["name"], "iat": int(time.time())},
        JWT_SECRET,
        algorithm="HS256"
    )
    access_tokens[access_token] = user

    return {
        "access_token": access_token,
        "token_type": "Bearer",
        "id_token": id_token,
        "expires_in": 3600
    }


# 3. UserInfo Endpoint
@app.get("/userinfo")
def userinfo(request: Request):
    auth = request.headers.get("Authorization")
    if not auth or not auth.startswith("Bearer "):
        return JSONResponse({"error": "invalid_token"}, status_code=401)

    token = auth.split()[1]
    if token not in access_tokens:
        return JSONResponse({"error": "invalid_token"}, status_code=401)

    return access_tokens[token]



from fastmcp.server import Server
from fastmcp.server.auth import OAuthProxy

oauth_proxy = OAuthProxy(
    client_id="my-client-id",
    client_secret="my-client-secret",
    authorization_endpoint="http://localhost:8000/authorize",
    token_endpoint="http://localhost:8000/token",
    userinfo_endpoint="http://localhost:8000/userinfo",
    scopes=["openid", "profile", "email"]
)

server = Server(auth=oauth_proxy)
